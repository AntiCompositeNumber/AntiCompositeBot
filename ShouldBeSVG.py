#!/usr/bin/env python3
# coding: utf-8
# SPDX-License-Identifier: Apache-2.0


   # Copyright 2019 AntiCompositeNumber 

   # Licensed under the Apache License, Version 2.0 (the "License");
   # you may not use this file except in compliance with the License.
   # You may obtain a copy of the License at

       # http://www.apache.org/licenses/LICENSE-2.0

   # Unless required by applicable law or agreed to in writing, software
   # distributed under the License is distributed on an "AS IS" BASIS,
   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   # See the License for the specific language governing permissions and
   # limitations under the License.

version = 'ShouldBeSVG 0.4.0'

import pywikibot
from pywikibot import pagegenerators
import datetime
import argparse

def getUsage(cat, depth):

    gen = pagegenerators.CategorizedPageGenerator(cat,recurse=depth,namespaces=6,total=5)

    # Generate a dictionary with diagrams that should be SVG.
    usageCounts = {}
    skipped = ''

    for page in gen:
        try:
            mimetype = pywikibot.FilePage(page).latest_file_info.mime
        except pywikibot.PageRelatedError:
            skipped += page.title()
            print('Skipping', page)
        else:
            if mimetype != 'image/svg+xml':
                try:
                    usage = pywikibot.FilePage.globalusage(page)
                    l = len(list(usage))
                    usageCounts[page] = l
                except (pywikibot.NoUsername, pywikibot.PageRelatedError):
                    skipped += page.title()
                    print('Skipping', page)

    # Sort from greatest to least
    usageCountsSorted = sorted(usageCounts, key=usageCounts.__getitem__, reverse=True)

    # Count the global usage for the top 200 files
    i = 0
    j = 200
    totalScanned = len(list(usageCounts))
    sortedPages = ''
    for page in usageCountsSorted:
        if i < j:
            i += 1
            title = page.title()
            count = usageCounts[page]
            sortedPages += '{title}|{i}. Used {count} times.\n'.format(
                title=title, i=i, count=count)
    print('Scanning finished')
    return sortedPages,totalScanned,skipped

def constructGallery(cat, totalScanned, sortedPages, skipped, version, depth):
    date = datetime.date.today()
    cats = "'''[[:{maincat}]]''' ({num} files) \n".format(maincat=cat.title(),
        num=cat.categoryinfo['files'])
    pageCats = '{maincat}\n[[Category:Images that should use vector graphics]]'.format(maincat=cat.aslink())
    if depth > 0:
        for subcat in cat.subcategories(recurse=depth - 1):
           cats +=  "* [[:{subcat}]] ({num} files) \n".format(subcat=subcat.title(),
                num=subcat.categoryinfo['files'])
    gallery = '''Last update: {{{{isodate|1={date}}}}}.

This report includes the following categories while counting only the usage of each file in the main namespace.
{cats}

Total number of scanned files: {totalScanned}
<gallery showfilename=yes>
{sortedPages}
</gallery>

This report was generated by AntiCompositeBot {version}. The following files were skipped during the generation of this report:
{skippedFiles}

{pageCats}'''.format(date=date, cats=cats, totalScanned=totalScanned,
        sortedPages=sortedPages, skippedFiles=skipped, pageCats=pageCats, version=version)
    
    return gallery

def savePage(target, text):
    site = pywikibot.Site('commons', 'commons')
    target.text = text
    target.save(summary='Updating gallery (Bot) ({version})'.format(version=version), botflag=False) 

reports = {
        'diagram': {'gallery': 'Top 200 diagram images that should use vector graphics', 'category':'Category:Diagram images that should use vector graphics', 'depth':1},
        'graph': {'gallery': 'Top 200 graph images that should use vector graphics', 'category': 'Category:Graph images that should use vector graphics', 'depth':1},
        'math': {'gallery': 'Top 200 math images that should use vector graphics', 'category': 'Category:Math images that should use vector graphics', 'depth':1},
        'text': {'gallery': 'Top 200 text images that should use vector graphics', 'category': 'Category:Text images that should use vector graphics', 'depth':2},
        'sport': {'gallery': 'Top 200 sport images that should use vector graphics', 'category': 'Category:Sport images that should use vector graphics', 'depth':2},
        'military_insignia': {'gallery': 'Top 200 military insignia images that should use vector graphics', 'category': 'Category:Military insignia images that should use vector graphics', 'depth':0},
        'biology': {'gallery': 'Top 200 biology images that should use vector graphics', 'category': 'Category:Biology images that should use vector graphics', 'depth':1},
        'ribbon': {'gallery': 'Top 200 ribbon images that should use vector graphics', 'category': 'Category:Ribbon images that should use vector graphics', 'depth':1},
        'technology': {'gallery': 'Top 200 technology images that should use vector graphics', 'category': 'Category:Technology images that should use vector graphics', 'depth':1},
        'transport_map': {'gallery': 'Top 200 transport map images that should use vector graphics', 'category': 'Category:Transport map images that should use vector graphics', 'depth':1},
        'chemical': {'gallery': 'Top 200 chemical images that should use vector graphics', 'category': 'Category:Chemical images that should use vector graphics', 'depth':0},
        'physics': {'gallery': 'Top 200 physics images that should use vector graphics', 'category': 'Category:Physics images that should use vector graphics', 'depth':2},
        'chemistry': {'gallery': 'Top 200 chemistry images that should use vector graphics', 'category': 'Category:Chemistry images that should use vector graphics', 'depth':0},
        'sign': {'gallery': 'Top 200 road sign images that should use vector graphics', 'category': 'Category:Road sign images that should use vector graphics', 'depth':0},
        'jpg': {'gallery': 'Top 200 JPG images that should use vector graphics', 'category': 'Category:JPG images that should use vector graphics', 'depth':1},
        'coat_of_arms': {'gallery': 'Top 200 coat of arms images that should use vector graphics', 'category': 'Category:Coat of arms images that should use vector graphics', 'depth':1},
        'locator_map': {'gallery': 'Top 200 locator map images that should use vector graphics', 'category': 'Category:Locator map images that should use vector graphics', 'depth':0},
        'logo': {'gallery': 'Top 200 logo images that should use vector graphics', 'category': 'Logo images that should use vector graphics', 'depth':1},
        'map': {'gallery': 'Top 200 map images that should use vector graphics', 'category': 'Category:Map images that should use vector graphics', 'depth':2},
        'flag': {'gallery': 'Top 200 flag images that should use vector graphics', 'category':'Category:Flag images that should use vector graphics', 'depth':1},
        'symbol of municipalities in Japan': {'gallery': 'Top 200 symbol of municipalities in Japan images that should use vector graphics', 'category': 'Symbol of municipalities in Japan images that should use vector graphics', 'depth':1}
}

parser = argparse.ArgumentParser(description='Generate global usage reports for vectorization categories.')
parser.add_argument('key')
args = parser.parse_args()

site = pywikibot.Site('commons', 'commons')
cat = pywikibot.Category(site, reports[args.key]['category'])
target = pywikibot.Page(site, reports[args.key]['gallery'])
depth = reports[args.key]['depth']

print('AntiCompositeBot {version} started at {starttime}'.format(version=version,
    starttime=datetime.datetime.now().isoformat()))

sortedPages,totalScanned,skipped = getUsage(cat, depth)
gallery = constructGallery(cat, totalScanned, sortedPages, skipped, version, depth)
#savePage(target, gallery)
print(gallery)


